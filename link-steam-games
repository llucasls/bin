#!/usr/bin/env python3
import configparser
import csv
import os
import re
import sys
from pathlib import Path
from typing import cast

desktop_dir = Path("~/Desktop").expanduser()
config_dir = Path(os.environ.get("XDG_CONFIG_HOME", "~/.config")).expanduser()
config_file = config_dir / "steam_games.csv"

pattern = re.compile(r"[\-_ :]+")


def parse_desktop_file(filepath: Path) -> configparser.SectionProxy | None:
    try:
        parser = configparser.ConfigParser(interpolation=None)
        parser.read(filepath, encoding="utf-8")
        if "Desktop Entry" not in parser:
            return None

        return parser["Desktop Entry"]
    except Exception:
        return None


def parse_entry(entry: configparser.SectionProxy) -> tuple[str, str] | None:
    exec_val: str = entry.get("Exec", "")
    if not exec_val.startswith("steam steam://rungameid/"):
        return None

    _name = entry.get("Name")
    if _name is None:
        return None
    name: str = pattern.sub("-", _name.lower())

    try:
        gameid: str = format(exec_val.split("/")[3], ">07")
    except Exception:
        return None

    return gameid, name


def read_desktop_dir() -> None:
    """
    Seek out .desktop files at ~/Desktop and parse the ones that
    correspond to Steam games. Parsed files are recorded at a CSV
    configuration file then deleted. At the end of the function, if the
    directory is empty, it is also removed.
    """
    config_dir.mkdir(mode=0o700, parents=True, exist_ok=True)
    config_file.touch(mode=0o600, exist_ok=True)

    if not desktop_dir.exists():
        raise FileNotFoundError("Desktop directory does not exist")

    for file in desktop_dir.iterdir():
        if not file.name.endswith(".desktop"):
            continue

        entry: configparser.SectionProxy
        entry = cast(configparser.SectionProxy, parse_desktop_file(file))
        if entry is None:
            continue

        game_data = parse_entry(entry)
        if game_data is None:
            continue

        gameid: str
        name: str
        gameid, name = game_data

        try:
            with config_file.open(mode="a", newline="", encoding="utf-8") as f:
                writer = csv.writer(f)
                writer.writerow([gameid, name])
            file.unlink()
        except Exception:
            continue

    if len(list(desktop_dir.iterdir())) == 0:
        desktop_dir.rmdir()


def main():
    if desktop_dir.exists():
        read_desktop_dir()


if __name__ == "__main__":
    sys.exit(main())
